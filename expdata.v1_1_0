#!/bin/sh

################################################################################
#
#	expdata
#
#	A tool to generate script to export data from Oracle Database
#
#	This tool has been tested in Oracle 10g to generate script to export
#	data to a file for use with SQL*Loader
#
#   Version	Date		Modified by	Descriptions
#  --------------------------------------------------------------------------
#   1.0.0	20090708	Kane Lai	First release
#   1.0.1	20090802	Kane Lai	Can now handle column names
#						being a SQL*Loader reserved
#						keyword
#   1.0.2	20100416	Kane Lai	Fixed maximum rownum issue
#   1.0.3	20101028	Kane Lai	Added the APPEND option to the
#						SQL*Loader script
#   1.0.4	20110117	Kane Lai	Use UTF8 encoding in SQL*Loader
#   1.0.5	20110118	Kane Lai	Added column name to the first
#						line of the CSV file
#						SQL*Loader would skip the first
#						line of the CSV file
#						Added support for NVARCHAR2
#   1.1.0	20110513	Kane Lai	Can now handle CR/LF characters
#						No longer produce CSV files by
#						default, but used ^ and # as
#						separators, so that more
#						non-English characters could be
#						exported safely. Can be overridden
#						in config section.
#						Treat any relatively positioned
#						columns that are not present in
#						the record as null columns
#						Fixed a bug that " " would be
#						changed to null
#
################################################################################
#
# Config
#

# Specify the format of the data file
# 1 for custom format, 2 for CSV
data_file_format=2

# Specify the NLS_CHARACTERSET of the destination DB
# e.g. UTF8, US7ASCII, WE8ISO8859P1
dest_nls_characterset=UTF8

################################################################################


version="1.1.0"

# Config validation
if [ "$data_file_format" -eq 1 ]; then
	data_filename_ext="dat"
	field_terminated_by="@"
	field_enclosed_by="^"
elif [ "$data_file_format" -eq 2 ]; then
	data_filename_ext="csv"
	field_terminated_by=","
	field_enclosed_by="\""
else
	echo "Misconfiguration in script: data_file_format"
	exit 2
fi

if [ $# -lt 2 ]; then
	echo "expdata v$version - A tool to generate script to export data from Oracle Database"
	echo "Generated script will be named data_(table_name).sql in the current directory"
	echo "Data exported with the script will be named data_(table_name).dat/csv in the current directory"
	echo "A script named data_(table_name).sh, which can be used to load the exported file with SQL*Loader, will also be generated in the current directory"
	echo "Control file for SQL*Loader will be named data_(table_name).ctl"
	echo "Usage:	`basename $0` [db_conn_str table_name [date_format]]"
	echo "    \"db_conn_str\": Oracle Database connection string to be passed to sqlplus, e.g. admin/mypassword@ora10g"
	echo "    \"table_name\": Oracle table name, which is case in-sensitive, e.g. card_info"
	echo "    \"date_format\": Date format, e.g. yyyymmddhh24miss"
	echo
	echo "See the \"Config\" section of the script to customize the output"
	echo "*** When exporting non-English data, remember to set NLS_LANG when exporting data from the source DB, and set the NLS_CHARACTERSET of the destination DB in the \"Config\" section of this script. ***"
	exit 1
fi

db_conn_str=$1
is_conn_str_ok=`echo $db_conn_str | grep -ic /`
if [ $is_conn_str_ok -ne 1 ]; then
echo "Oracle Database connection string must be of the format \"username/password[@connect_identifier]\""
	exit 1
fi

if [ $# -gt 2 ]; then
	date_format=$3
else
	date_format="yyyymmddhh24miss"
fi

# change table name to upper case
tab_name="`echo $2 | tr "[:lower:]" "[:upper:]"`"

# get the lower case table name
tab_name_lower="`echo $tab_name | tr "[:upper:]" "[:lower:]"`"
script=`echo "data_"$tab_name_lower".sql" | tr '[$]' '[_]'`
ctl=`echo "data_"$tab_name_lower".ctl" | tr '[$]' '[_]'`
log=`echo "data_"$tab_name_lower".log" | tr '[$]' '[_]'`
cmd=`echo "data_"$tab_name_lower".sh" | tr '[$]' '[_]'`
data=`echo "data_"$tab_name_lower"."$data_filename_ext | tr '[$]' '[_]'`
bad=`echo "data_"$tab_name_lower".bad" | tr '[$]' '[_]'`
discard=`echo "data_"$tab_name_lower".dis" | tr '[$]' '[_]'`

# execute SQL script
sqlplus -SL $db_conn_str << EOSQL >> /dev/null
set echo off
set maxdata 50000
set long 50000
set longchunksize 1000
set pages 0 lines 32767
set heading off
set verify off
set termout off
set feedback off
set trims on
set serveroutput on
set scan off
set timing off





----------------------------------
-- write control file
----------------------------------
spool $ctl
prompt LOAD DATA
prompt CHARACTERSET $dest_nls_characterset
prompt INFILE '$data'
prompt BADFILE '$bad'
prompt DISCARDFILE '$discard'
prompt INTO TABLE $tab_name
prompt APPEND
prompt FIELDS TERMINATED BY '$field_terminated_by'
prompt ENCLOSED BY '$field_enclosed_by'
prompt (
select	decode(column_id, 1, '   ', ' , ')||
	rpad('"'||column_name||'"', 33, ' ')||
	decode(data_type,
		'VARCHAR2', 'CHAR "REPLACE(REPLACE(:'||column_name||',''%%LF%%'',chr(10)),''%%CR%%'',chr(13))"',
		'NVARCHAR2', 'CHAR "REPLACE(REPLACE(:'||column_name||',''%%LF%%'',chr(10)),''%%CR%%'',chr(13))"',
		'FLOAT', 'DECIMAL EXTERNAL',
		'NUMBER', decode(data_precision,
				0, 'INTEGER EXTERNAL',
				decode(data_scale,
					0, 'INTEGER EXTERNAL',
					'DECIMAL EXTERNAL')),
		'DATE', 'DATE "$date_format"', null)
from	user_tab_columns
where	table_name = '$tab_name'
order by column_id;
prompt )
spool off






----------------------------------
-- write select statement
----------------------------------
spool $script



prompt set echo off
prompt set maxdata 50000
prompt set long 50000
prompt set longchunksize 1000
prompt set pages 0 lines 32767
prompt set heading off
prompt set verify off
prompt set timing off
select 'define MAX_RECORD_COUNT = ''&MAX_RECORD_COUNT'';' from dual;
prompt
prompt set termout off
prompt set feedback off
prompt set trim on trims on
prompt set newpage none
prompt set time off
prompt set timing off
prompt set colsep ,
prompt set serveroutput on
select 'alter session set nls_date_format=''$date_format'';' from dual;
prompt spool $data
prompt



declare
	v_table_count	pls_integer;

	v_con_count	pls_integer;
	v_con_index	pls_integer;

	v_con_type	user_constraints.constraint_type%type;
	v_con_name	user_constraints.constraint_name%type;
	v_con_status	user_constraints.status%type;

	v_col_count	pls_integer;
	v_col_index	pls_integer;

	v_col_name	user_tab_columns.column_name%type;
	v_data_type	user_tab_columns.data_type%type;
	v_col_name2	varchar2(500);
	v_str_head	varchar2(5000);
	v_str		varchar2(5000);
begin

	----------------------------------
	-- check for existence of the table
	----------------------------------

	select	count(*)
	into	v_table_count
	from	user_tables
	where	table_name = '$tab_name';
	if v_table_count != 1 then
		dbms_output.put_line('###ERROR###');
		return;
	end if;

	----------------------------------
	-- write select statement
	----------------------------------

	v_str_head := 'select';
	v_str := 'select';

	select	count(*)
	into	v_col_count
	from	user_tab_columns
	where	table_name = '$tab_name'
	and	column_id is not null;

	for v_col_index in 1..v_col_count loop
		select	column_name,
			data_type
		into	v_col_name,
			v_data_type
		from	user_tab_columns
		where	table_name = '$tab_name'
		and	column_id = v_col_index;

		v_col_name2 := lower(v_col_name);

		if v_col_index != v_col_count then
			v_str_head := v_str_head||chr(9);
			v_str_head := v_str_head||'''$field_enclosed_by'||v_col_name||'$field_enclosed_by$field_terminated_by''';
			v_str_head := v_str_head||'||';
			v_str_head := v_str_head||chr(10);

			v_str := v_str||chr(9);
			v_str := v_str||'''$field_enclosed_by''';
			v_str := v_str||'||';
			if v_data_type in ('VARCHAR2','NVARCHAR2') then
				v_str := v_str||'replace(replace('||v_col_name2||',chr(10),''%%LF%%''),chr(13),''%%CR%%'')';
			else
				v_str := v_str||v_col_name2;
			end if;
			v_str := v_str||'||';
			v_str := v_str||'''$field_enclosed_by$field_terminated_by''';
			v_str := v_str||'||';
			v_str := v_str||chr(10);
		else
			v_str_head := v_str_head||chr(9);
			v_str_head := v_str_head||'''$field_enclosed_by$field_terminated_by'||v_col_name||'$field_enclosed_by$field_terminated_by''';
			v_str_head := v_str_head||chr(10);

			v_str := v_str||chr(9);
			v_str := v_str||'''$field_enclosed_by''';
			v_str := v_str||'||';
			if v_data_type in ('VARCHAR2','NVARCHAR2') then
				v_str := v_str||'replace(replace('||v_col_name2||',chr(10),''%%LF%%''),chr(13),''%%CR%%'')';
			else
				v_str := v_str||v_col_name2;
			end if;
			v_str := v_str||'||';
			v_str := v_str||'''$field_enclosed_by''';
			v_str := v_str||chr(10);
		end if;
	end loop;

	v_str_head := v_str_head||'from'||chr(9)||'dual;';
	dbms_output.put_line(v_str_head);

	v_str := v_str||'from'||chr(9)||'$tab_name'||chr(10);
	v_str := v_str||'where'||chr(9)||'rownum <= &'||'MAX_RECORD_COUNT;';
	dbms_output.put_line(v_str);

exception
	when others then
		dbms_output.put_line('###ERROR###');
		dbms_output.put_line('Error '||sqlcode||' - '||sqlerrm);
end;
/


prompt spool off



spool off



exit
EOSQL


if [ -f $script ] && [ -f $ctl ]; then
	# confirm the export was successful
	is_error=`grep -ic "###ERROR###" $script`
	if [ $is_error -gt 0 ]; then
		echo "Failed to generate export script for table \"$tab_name\", probably because the table does not exist or is inaccessible"
		rm $script
		rm $ctl
		exit 1
	fi

	# generate command file
	echo "#!/bin/sh" > $cmd
	echo "" >> $cmd
	echo "if [ \$# -gt 0 ]; then" >> $cmd
	echo "	if [ -f $bad ]; then" >> $cmd
	echo "		rm $bad" >> $cmd
	echo "	fi" >> $cmd
	echo "	if [ -f $discard ]; then" >> $cmd
	echo "		rm $discard" >> $cmd
	echo "	fi" >> $cmd
	echo "	if [ -f $log ]; then" >> $cmd
	echo "		rm $log" >> $cmd
	echo "	fi" >> $cmd
	echo "	sqlldr \$1 control=$ctl log=$log data=$data direct=false skip=1" >> $cmd
	echo "else" >> $cmd
	echo "	echo \"Usage:	\`basename \$0\` [db_conn_str]\"" >> $cmd
	echo "	echo \"    \\\"db_conn_str\\\": Connection string of the Oracle Database to load data into, e.g. admin/mypassword@ora10g\"" >> $cmd
	echo "fi" >> $cmd
	chmod +x $cmd

	# export successful
	echo "Script and related files for table \"$tab_name\" are generated successfully"
else
	echo "Failed to logon to Oracle Database, probably because the connection string is incorrect"
	exit 1
fi

